#include "findaction.h"
#include "setdisplay.h"

int g_map[ MAPROW ][ MAPCOL ] =
{
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
  1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
  1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
  1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,
  1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,
  1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,
  1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,
  1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,
  1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,
  1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,
  1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,
  0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
  1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,
  1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,
  1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,
  1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,
  1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,
  1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
  1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
  1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
  1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,
  1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,
  1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,
  1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,
  1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,
  1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};


// 输出地图
void echoMap()
{
  // 设置颜色
  WORD ColorWall = SetConsoleColor(0 , COLOR_GREEN);  // 绿色背景，前景无所谓
  WORD ColorRoad = SetConsoleColor(0 , COLOR_WHITE);  // 白色背景，前景无所谓

  // 输出地图
  for(int i = 0; i < MAPROW ; ++i)
  {
    for(int j = 0; j < MAPCOL; ++j)
    {
      // 打印元素
      WriteChar(i , j , "  " ,
                g_map[ i ][ j ] == 0 ? ColorRoad : ColorWall);
    }
  }
}


// 调用寻路算法，从23，14的位置开始追踪目标
void Move(int nRow , int nCol)
{
  // 设置颜色
  WORD ColorGhost = SetConsoleColor(COLOR_PURPLE , COLOR_WHITE); // 紫色前景，白色背景
  WORD ColorDst   = SetConsoleColor(COLOR_BLACK , COLOR_WHITE);  // 黑色前景，白色背景
  
  // 设置坐标
  CPostion Ghost(23 , 13);
  CPostion dstPost(nRow , nCol);

  // 打印元素
  WriteChar(Ghost[emPostion::posRow] ,
            Ghost[emPostion::posCol] ,
            "●" ,
            ColorGhost);

  // 打印元素
  WriteChar(dstPost[emPostion::posRow] ,
            dstPost[emPostion::posCol] ,
            "●" ,
            ColorDst);
  
  
  int GetAction = 0;

  // 设置无法穿越的元素
  int CarshElement = 1;
  // 假如有多个无法穿越的元素
  // int ArrCarshElement[] = { 1 , 2 };
  while (Ghost != dstPost)
  {
    
    Sleep(50);

    //调用寻路算法获取下一步方向
    //一个无法穿越的元素
    GetAction = FindAction(g_map ,
                           Ghost ,
                           // dstPost ,            // 采用 CPostion 传参
                           CPostion(nRow , nCol) , // 也可采用无名对象来传参
                           &CarshElement           // 只有一种元素无法穿越时可不用传数组
                           );
    // 多个无法穿越的元素
     //GetAction = FindAction(g_map ,
     //                       Ghost ,
     //                       CPostion(nRow , nCol) , // 也可采用无名对象来传参
     //                       ArrCarshElement ,       // 有2种元素无法穿越
     //                       2                       // 有2种元素无法穿越
     //                       );

    // 检查
    if(GetAction < 0 || GetAction > emAction::actRight)
    {
      break;
    }

    // 更改坐标
    Ghost = Ghost.getActionPostion(GetAction);

    // 打印元素
    WriteChar(Ghost[emPostion::posRow] ,
              Ghost[emPostion::posCol] ,
              "●" ,
              ColorGhost);
    
  }
}

int main()
{
  SetWindowSize("寻路算法演示" , MAPROW , MAPCOL);

  // 1
  echoMap();
  Move(5 , 26);
  getchar();

  // 2
  echoMap();
  Move(1 , 1);
  getchar();

  // 3
  echoMap();
  Move(15 , 11);
  getchar();

  // 4
  echoMap();
  Move(14 , 16);
  getchar();

  // 5
  echoMap();
  Move(29 , 1);
  getchar();

  // 6
  echoMap();
  Move(27 , 26);
  getchar();

  // 7 对于这个目标有两条最优路径
  echoMap();
  Move(29 , 23);

  getchar();
  return 0;
}